{"version":3,"sources":["components/AuthButton/AuthButton.module.css","components/AuthButton/AuthButton.jsx","components/Page/Page.jsx","API/OAuth.js","App.js","serviceWorker.js","index.js","components/Page/Page.module.css"],"names":["module","exports","params","login","link","document","location","href","AuthButton","window","localStorage","getItem","to","url","access_token","match","RegExp","user_id","setItem","className","styles","onClick","exit","removeItem","Page","history","pushState","useState","account","setAccount","useEffect","axios","get","user_ids","v","then","response","data","catch","console","log","InfoWrapper","Data","Name","first_name","SecondName","last_name","Exit","App","path","component","exact","Boolean","hostname","ReactDOM","render","StrictMode","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,WAAa,iC,0LCGzBC,EACS,QADTA,EAEO,OAFPA,EAGY,yBAHZA,EAIK,GAJLA,EAKa,QALbA,EAMC,QAGDC,EAAQ,WACV,IAAMC,EAAI,mDAA+CF,EAA/C,oBAA2EA,EAA3E,yBAA0GA,EAA1G,kBAAuIA,EAAvI,0BAAqKA,EAArK,cAA+LA,GACzMG,SAASC,SAASC,KAAOH,GAyBdI,EArBI,WAEf,GAA8C,OAA3CC,OAAOC,aAAaC,QAAQ,YAAiE,OAA1CF,OAAOC,aAAaC,QAAQ,UAC9E,OAAO,kBAAC,IAAD,CAAUC,GAAG,aAGxB,IAAMC,EAAMJ,OAAOH,SAASC,KACtBO,EAAeD,EAAIE,MAAM,IAAIC,OAAO,0BACpCC,EAAUJ,EAAIE,MAAM,IAAIC,OAAO,qBACrC,OAAGF,GACCL,OAAOC,aAAaQ,QAAQ,UAAWJ,EAAa,IACpDL,OAAOC,aAAaQ,QAAQ,SAAUD,EAAQ,IACvC,kBAAC,IAAD,CAAUL,GAAG,cAGjB,uBAAGO,UAAWC,IAAOZ,WAAYa,QAASlB,GAA1C,uE,gDC3BLmB,EAAO,WACTZ,aAAaa,WAAW,UACxBb,aAAaa,WAAW,YA+BbC,EA5BF,WAETf,OAAOgB,QAAQC,UAAU,GAAG,GAAG,YAFlB,MAGiBC,mBAAS,IAH1B,mBAGNC,EAHM,KAGGC,EAHH,KAab,OARAC,qBAAU,WCdVC,IAAMC,IAAI,sCAAsC,CAC5C9B,OAAQ,CACJ+B,SAAUxB,OAAOC,aAAaC,QAAQ,UACtCuB,EAAE,MACFpB,aAAcL,OAAOC,aAAaC,QAAQ,cAE/CwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QDSRF,MAAK,SAAAC,GAClBP,EAAWO,EAASA,SAAS,OAC9BE,OAAM,SAAAF,GACLG,QAAQC,IAAIJ,QAEjB,IAGH,yBAAKjB,UAAWC,IAAOqB,aACnB,yBAAKtB,UAAWC,IAAOsB,MACnB,yBAAKvB,UAAWC,IAAOuB,MAClBf,EAAQgB,YAEb,yBAAKzB,UAAWC,IAAOyB,YAClBjB,EAAQkB,YAGjB,kBAAC,IAAD,CAAMlC,GAAG,IAAIO,UAAWC,IAAO2B,KAAM1B,QAASC,GAA9C,oC,MErBO0B,MATf,WACE,OACE,yBAAK7B,UAAU,SACX,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,UAAW1C,EAAY2C,OAAK,IAC5C,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAW1B,EAAM2B,OAAK,MCGjCC,QACW,cAA7B3C,OAAOH,SAAS+C,UAEe,UAA7B5C,OAAOH,SAAS+C,UAEhB5C,OAAOH,SAAS+C,SAAStC,MACvB,2DCZNuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAS,YACf,kBAAC,EAAD,QAGJpD,SAASqD,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLzB,QAAQyB,MAAMA,EAAMC,a,kBExI5BjE,EAAOC,QAAU,CAAC,YAAc,0BAA0B,KAAO,mBAAmB,KAAO,mBAAmB,WAAa,yBAAyB,KAAO,sB","file":"static/js/main.e6c6761a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthButton\":\"AuthButton_AuthButton__3zXsg\"};","import React from 'react';\r\nimport styles from './AuthButton.module.css';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst params = {\r\n    client_id: 7629557,\r\n    display: 'page',\r\n    redirect_uri: 'http://localhost:3000/',\r\n    scope: '',\r\n    response_type: 'token',\r\n    v: '5.124'\r\n}\r\n\r\nconst login = ()=>{\r\n    const link = `https://oauth.vk.com/authorize?client_id=${params.client_id}&display=${params.display}&redirect_uri=${params.redirect_uri}&scope=${params.scope}&response_type=${params.response_type}&v=${params.v}`;\r\n    document.location.href = link;\r\n}\r\n\r\n\r\nconst AuthButton = ()=>{\r\n\r\n    if(window.localStorage.getItem('tokenVk') !== null && window.localStorage.getItem('userId') !== null){\r\n        return <Redirect to='/profile' />  \r\n    }\r\n    \r\n    const url = window.location.href;\r\n    const access_token = url.match(new RegExp('access_token' + '=([^&=]+)'));\r\n    const user_id = url.match(new RegExp('user_id' + '=([^&=]+)'));\r\n    if(access_token){\r\n        window.localStorage.setItem('tokenVk', access_token[1]);\r\n        window.localStorage.setItem('userId', user_id[1]);\r\n        return <Redirect to='/profile' />\r\n    }\r\n    else{\r\n    return <a className={styles.AuthButton} onClick={login}>\r\n        Авторизация\r\n    </a>\r\n    }\r\n}\r\n\r\nexport default AuthButton;","import React, {useState, useEffect} from 'react';\r\nimport styles from './Page.module.css';\r\nimport {getProfileInfo} from '../../API/OAuth';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst exit = () => {\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('tokenVk');\r\n}\r\n\r\nconst Page = ()=>{\r\n\r\n    window.history.pushState({},{},'/profile');\r\n    const [account, setAccount] = useState({});\r\n\r\n    useEffect(() => {\r\n        getProfileInfo().then(response=>{\r\n            setAccount(response.response[0]);\r\n        }).catch(response=>{\r\n            console.log(response);\r\n    })\r\n    }, []);\r\n\r\n    return(\r\n    <div className={styles.InfoWrapper}>\r\n        <div className={styles.Data}>\r\n            <div className={styles.Name}>\r\n                {account.first_name}\r\n            </div>\r\n            <div className={styles.SecondName}>\r\n                {account.last_name}\r\n            </div>\r\n        </div>\r\n        <Link to='/' className={styles.Exit} onClick={exit}>Выход</Link>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Page;","import axios from 'axios';\r\n\r\nexport const getProfileInfo = () => (\r\n    axios.get('https://api.vk.com/method/users.get',{\r\n        params: {\r\n            user_ids: window.localStorage.getItem('userId'),\r\n            v:5.124,\r\n            access_token: window.localStorage.getItem('tokenVk'),\r\n        }\r\n    }).then(response => response.data)\r\n)","import React from 'react';\nimport AuthButton from './components/AuthButton/AuthButton';\nimport Page from './components/Page/Page';\nimport './OAuth.css';\nimport { Route } from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"OAuth\">\n        <Route path=\"/\" component={AuthButton} exact />\n        <Route path=\"/profile\" component={Page} exact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/VkOAuth\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InfoWrapper\":\"Page_InfoWrapper__2dSXk\",\"Data\":\"Page_Data__2V2HX\",\"Name\":\"Page_Name__30Gs9\",\"SecondName\":\"Page_SecondName__2fkPY\",\"Exit\":\"Page_Exit__3DEkr\"};"],"sourceRoot":""}